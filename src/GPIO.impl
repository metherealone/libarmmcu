/*
 * GPIO.cpp
 *
 *  Created on: Apr 4, 2014
 *      Author: Tolga HOŞGÖR
 */

#ifndef GPIO_CPP_
#define CPIO_CPP_

#include <GPIO.h>

namespace GPIO
{

template<Port port>
constexpr PortType<port> volatile* const getPort()
{
  return reinterpret_cast<PortType<port> volatile* const>(0);
}

template<Port port>
template<uint8_t m_idx>
PortType<port>::Pin<m_idx>* PortType<port>::getPin() volatile
{
  return 0;
}

template<Port port>
template<uint8_t m_idx>
void PortType<port>::Pin<m_idx>::setMode(PortType::Pin<m_idx>::Mode const mode)
{
  reinterpret_cast<GPIO::PortType<port> volatile*>(port)->m_MODER &= ~(0x3 <<(m_idx * 2));
  reinterpret_cast<GPIO::PortType<port> volatile*>(port)->m_MODER |= static_cast<uint32_t>(mode) <<(m_idx * 2);
}

template<Port port>
template<uint8_t m_idx>
void PortType<port>::Pin<m_idx>::set()
{
  reinterpret_cast<GPIO::PortType<port> volatile*>(port)->m_BSRR |= static_cast<uint16_t>(0x1) <<m_idx;
}

template<Port port>
template<uint8_t m_idx>
void PortType<port>::Pin<m_idx>::reset()
{
  reinterpret_cast<GPIO::PortType<port> volatile*>(port)->m_BSRR |= static_cast<uint32_t>(0x1) <<(m_idx + 16);
}

template<Port port>
template<uint8_t m_idx>
bool PortType<port>::Pin<m_idx>::getInputState()
{
  return (reinterpret_cast<GPIO::PortType<port> volatile*>(port)->m_IDR & (static_cast<uint16_t>(0x1) <<m_idx));
}

template<Port port>
template<uint8_t m_idx>
bool PortType<port>::Pin<m_idx>::getOutputState()
{
  return (reinterpret_cast<GPIO::PortType<port> volatile*>(port)->m_ODR & (static_cast<uint16_t>(0x1) <<m_idx));
}

}

#endif /* GPIO_CPP_ */
