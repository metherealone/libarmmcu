/*
  Copyright (c) 2014, Tolga HOŞGÖR
  All rights reserved.

  Redistribution and use in source and binary forms, with or without
  modification, are permitted provided that the following conditions are met:

  * Redistributions of source code must retain the above copyright notice, this
    list of conditions and the following disclaimer.

  * Redistributions in binary form must reproduce the above copyright notice,
    this list of conditions and the following disclaimer in the documentation
    and/or other materials provided with the distribution.

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

#ifndef LCD_CPP_
#define LCD_CPP_

#include <LCD.h>

#include <SPI.h>

namespace stm32f429
{

GPIO::Port::OPin LCD::m_RDX = RCC::enablePeriph<RCC::GPIOD>()->createPin(12, GPIO::Port::OutputPin);
GPIO::Port::OPin LCD::m_WRX = RCC::enablePeriph<RCC::GPIOD>()->createPin(13, GPIO::Port::OutputPin);
GPIO::Port::OPin LCD::m_CSX = RCC::enablePeriph<RCC::GPIOC>()->createPin(2 , GPIO::Port::OutputPin);

SPI volatile* LCD::m_spi5 = RCC::enablePeriph<RCC::SPI5>();

LCD::LCD()
{ }

void LCD::enable() volatile
{
  /* Set or Reset the control line */
  m_CSX.reset();
  m_CSX.set();

  m_GCR |= 0x1 <<0;

  m_spi5->setBaudPrescaler(SPI::BaudPSC::_16);
  m_spi5->setUnidirectionalMode();
  m_spi5->enableSoftwareSlaveMode();
  m_spi5->setMasterMode();
  m_spi5->enable(SPI::DataFrame::_8Bit);

  writeReg(LCD_REG_0, 0x0001); /* Start internal OSC. */
  writeReg(LCD_REG_1, 0x0100); /* Set SS and SM bit */
  writeReg(LCD_REG_2, 0x0700); /* Set 1 line inversion */
  writeReg(LCD_REG_3, 0x1018); /* Set GRAM write direction and BGR=1. */
  writeReg(LCD_REG_4, 0x0000); /* Resize register */
  writeReg(LCD_REG_8, 0x0202); /* Set the back porch and front porch */
  writeReg(LCD_REG_9, 0x0000); /* Set non-display area refresh cycle ISC[3:0] */
  writeReg(LCD_REG_10, 0x0000); /* FMARK function */
  writeReg(LCD_REG_12, 0x0000); /* RGB interface setting */
  writeReg(LCD_REG_13, 0x0000); /* Frame marker Position */
  writeReg(LCD_REG_15, 0x0000); /* RGB interface polarity */

  /* Power On sequence -----------------------------------------------------*/
  writeReg(LCD_REG_16, 0x0000); /* SAP, BT[3:0], AP, DSTB, SLP, STB */
  writeReg(LCD_REG_17, 0x0000); /* DC1[2:0], DC0[2:0], VC[2:0] */
  writeReg(LCD_REG_18, 0x0000); /* VREG1OUT voltage */
  writeReg(LCD_REG_19, 0x0000); /* VDV[4:0] for VCOM amplitude */

  writeReg(LCD_REG_16, 0x17B0); /* SAP, BT[3:0], AP, DSTB, SLP, STB */
  writeReg(LCD_REG_17, 0x0137); /* DC1[2:0], DC0[2:0], VC[2:0] */

  writeReg(LCD_REG_18, 0x0139); /* VREG1OUT voltage */

  writeReg(LCD_REG_19, 0x1d00); /* VDV[4:0] for VCOM amplitude */
  writeReg(LCD_REG_41, 0x0013); /* VCM[4:0] for VCOMH */

  writeReg(LCD_REG_32, 0x0000); /* GRAM horizontal Address */
  writeReg(LCD_REG_33, 0x0000); /* GRAM Vertical Address */

  /* Adjust the Gamma Curve (ILI9325)---------------------------------------*/
  writeReg(LCD_REG_48, 0x0007);
  writeReg(LCD_REG_49, 0x0302);
  writeReg(LCD_REG_50, 0x0105);
  writeReg(LCD_REG_53, 0x0206);
  writeReg(LCD_REG_54, 0x0808);
  writeReg(LCD_REG_55, 0x0206);
  writeReg(LCD_REG_56, 0x0504);
  writeReg(LCD_REG_57, 0x0007);
  writeReg(LCD_REG_60, 0x0105);
  writeReg(LCD_REG_61, 0x0808);

  /* Set GRAM area ---------------------------------------------------------*/
  writeReg(LCD_REG_80, 0x0000); /* Horizontal GRAM Start Address */
  writeReg(LCD_REG_81, 0x00EF); /* Horizontal GRAM End Address */
  writeReg(LCD_REG_82, 0x0000); /* Vertical GRAM Start Address */
  writeReg(LCD_REG_83, 0x013F); /* Vertical GRAM End Address */

  writeReg(LCD_REG_96,  0xA700); /* Gate Scan Line(GS=1, scan direction is G320~G1) */
  writeReg(LCD_REG_97,  0x0001); /* NDL,VLE, REV */
  writeReg(LCD_REG_106, 0x0000); /* set scrolling line */

  /* Partial Display Control -----------------------------------------------*/
  writeReg(LCD_REG_128, 0x0000);
  writeReg(LCD_REG_129, 0x0000);
  writeReg(LCD_REG_130, 0x0000);
  writeReg(LCD_REG_131, 0x0000);
  writeReg(LCD_REG_132, 0x0000);
  writeReg(LCD_REG_133, 0x0000);

  /* Panel Control ---------------------------------------------------------*/
  writeReg(LCD_REG_144, 0x0010);
  writeReg(LCD_REG_146, 0x0000);
  writeReg(LCD_REG_147, 0x0003);
  writeReg(LCD_REG_149, 0x0110);
  writeReg(LCD_REG_151, 0x0000);
  writeReg(LCD_REG_152, 0x0000);

  /* set GRAM write direction and BGR = 1 */
  /* I/D=00 (Horizontal : increment, Vertical : decrement) */
  /* AM=1 (address is updated in vertical writing direction) */
  writeReg(LCD_REG_3, 0x1018);

  /* 262K color and display ON */
  writeReg(LCD_REG_7, 0x0173);

  selectReg(LCD_REG_34);
}

void LCD::setSync(uint16_t const hSync, uint16_t const vSync) volatile
{
  m_SSCR &= ~(0x0FFF <<16 | 0x07FF);
  m_SSCR |= (hSync - 1) <<16 | (vSync - 1);
}

void LCD::setBackPorch(uint16_t const hBP, uint16_t vBP) volatile
{
  m_BPCR &= ~(0x0FFF <<16 | 0x07FF);
  m_BPCR |= (hBP - 1) <<16 | (vBP - 1);
}

void LCD::setActiveWidth(uint16_t const width, uint16_t height) volatile
{
  m_AWCR &= ~(0x0FFF <<16 | 0x07FF);
  m_AWCR |= (width - 1) <<16 | (height - 1);
}

void LCD::setTotalWidth(uint16_t const width, uint16_t height) volatile
{
  m_TWCR &= ~(0x0FFF <<16 | 0x07FF);
  m_TWCR |= (width - 1) <<16 | (height - 1);
}

void LCD::immediateReload() volatile
{
  m_SRCR |= 0x1 <<0;
}

void LCD::blankingReload() volatile
{
  m_SRCR |= 0x1 <<1;
}

void LCD::setBgColor(uint8_t const r, uint8_t const g, uint8_t const b) volatile
{
  m_BCCR &= 0xFF000000;
  m_BCCR |= static_cast<uint32_t const>(r) <<16 | static_cast<uint32_t const>(g) <<8 | static_cast<uint32_t const>(b) <<0;
}

void LCD::selectReg(uint8_t const reg) volatile
{
  //reset WRX to send command
  m_WRX.reset();
  //reset LCD control line - SPI select?
  m_CSX.reset();
  m_spi5->send(reg);
  //set LCD control line - SPI deselect?
  m_CSX.set();
}

void LCD::writeRegData(uint16_t const value) volatile
{
  //set WRX to send data
  m_WRX.set();
  //reset LCD control line - SPI select?
  m_CSX.reset();
  m_spi5->send(value);
  //set LCD control line - SPI deselect?
  m_CSX.set();
}

void LCD::writeReg(uint8_t const reg, uint16_t const value) volatile
{
  selectReg(reg);
  writeRegData(value);
}

} //NS stm32f429

#endif /* LCD_CPP_ */
