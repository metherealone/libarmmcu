/*
  Copyright (c) 2014, Tolga HOŞGÖR
  All rights reserved.
  
  Redistribution and use in source and binary forms, with or without
  modification, are permitted provided that the following conditions are met:
  
  * Redistributions of source code must retain the above copyright notice, this
    list of conditions and the following disclaimer.
  
  * Redistributions in binary form must reproduce the above copyright notice,
    this list of conditions and the following disclaimer in the documentation
    and/or other materials provided with the distribution.
  
  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

#ifndef TIM_CPP_
#define TIM_CPP_

#include <TIM.h>

namespace stm32f429
{
namespace TIM
{

template<std::size_t module>
constexpr TIM<module> volatile* const getPeriph()
{
  return reinterpret_cast<TIM<module> volatile*>(module);
}

template<std::size_t module>
void TIM<module>::enable() volatile
{
  m_CR1 |= 0x1;
}

template<std::size_t module>
void TIM<module>::disable() volatile
{
  m_CR1 &= ~0x1;
}

template<std::size_t module>
void TIM<module>::setAutoReloadValue(uint16_t const value) volatile
{
  m_ARR = value;
}

template<std::size_t module>
void TIM<module>::setPrescalerValue(uint16_t const value) volatile
{
  m_PSC = value;
}

template<std::size_t module>
uint16_t TIM<module>::getCounterValue() volatile
{
  return m_CNT;
}

template<std::size_t module>
template<uint8_t idx>
constexpr TIM<module>::CC<idx> TIM<module>::getCC() volatile
{
  return TIM<module>::CC<idx>{};
}

template<std::size_t module>
void TIM<module>::enableUEV() volatile
{
  m_CR1 |= (0x1 <<1);
}

template<std::size_t module>
void TIM<module>::disableUEV() volatile
{
  m_CR1 &= ~(0x1 <<1);
}

template<std::size_t module>
void TIM<module>::setUEVSource(UEVSource const uEVSource) volatile
{
}

template<std::size_t module>
void TIM<module>::enableOnePulseMode() volatile
{
  m_CR1 |= 0x1 <<2;
}

template<std::size_t module>
void TIM<module>::disableOnePulseMode() volatile
{
  m_CR1 &= ~(0x1 <<2);
}

template<std::size_t module>
void TIM<module>::enableAutoReloadPreload() volatile
{
  m_CR1 |= 0x1 <<7;
}

template<std::size_t module>
void TIM<module>::disableAutoReloadPreload() volatile
{
  m_CR1 &= ~(0x1 <<7);
}

template<std::size_t module>
void TIM<module>::setMasterMode(TIM<module>::MasterMode const mode) volatile
{
  auto newCR = m_CR2; //TODO: BURADAKİ TEMP GEREKLİ Mİ?
  newCR &= ~(0x7 <<4);
  newCR |= static_cast<uint32_t>(mode) <<4;
  m_CR2 = newCR;
}

template<std::size_t module>
template<uint8_t idx>
void TIM<module>::CC<idx>::enable() volatile
{
  reinterpret_cast<TIM<module> volatile*>(module)->m_CCER |= 0x1 <<((idx - 1) * 4);
}

template<std::size_t module>
template<uint8_t idx>
void TIM<module>::CC<idx>::disable() volatile
{
  reinterpret_cast<TIM<module> volatile*>(module)->m_CCER |= ~(0x1 <<((idx - 1) * 4));
}

template<std::size_t module>
template<uint8_t idx>
void TIM<module>::CC<idx>::setValue(uint32_t const value) volatile
{
  uint32_t volatile* CCR1 = &(reinterpret_cast<TIM<module> volatile*>(module)->m_CCR1);
  *(CCR1 + (idx - 1)) =  value;
}

template<std::size_t module>
template<uint8_t idx>
void TIM<module>::CC<idx>::setOCMode(TIM<module>::CC<idx>::OCMode const mode) volatile
{
  setOCMode_<idx>(mode);
}

template<std::size_t module>
template<uint8_t idx>
void TIM<module>::CC<idx>::enableOCPreload() volatile
{
  enableOCPreload_<idx>();
}

template<std::size_t module>
template<uint8_t idx>
template<uint8_t idx_>
typename std::enable_if<(idx >= 1 && idx_ <= 2)>::type
TIM<module>::CC<idx>::setOCMode_(OCMode const mode) volatile
{
  constexpr uint8_t shiftBy{4 + (idx - 1) * 8};
  auto newCCMR = reinterpret_cast<TIM<module> volatile*>(module)->m_CCMR1;
  newCCMR &= ~(0x7 <<shiftBy);
  newCCMR |= static_cast<uint32_t>(mode) <<shiftBy;
  reinterpret_cast<TIM<module> volatile*>(module)->m_CCMR1 = newCCMR;
}

template<std::size_t module>
template<uint8_t idx>
template<uint8_t idx_>
typename std::enable_if<(idx_ >= 3 && idx_ <= 4)>::type
TIM<module>::CC<idx>::setOCMode_(OCMode const mode) volatile
{
  constexpr uint8_t shiftBy{4 + (idx - 3) * 8};
  auto newCCMR = reinterpret_cast<TIM<module> volatile*>(module)->m_CCMR2;
  newCCMR &= ~(0x7 <<shiftBy);
  newCCMR |= static_cast<uint32_t>(mode) <<shiftBy;
  reinterpret_cast<TIM<module> volatile*>(module)->m_CCMR2 = newCCMR;
}

template<std::size_t module>
template<uint8_t idx>
template<uint8_t idx_>
typename std::enable_if<(idx_ >= 1 && idx_ <= 2)>::type
TIM<module>::CC<idx>::enableOCPreload_() volatile
{
  constexpr uint8_t shiftBy{ 3 + (idx - 1) * 8};
  reinterpret_cast<TIM<module> volatile*>(module)->m_CCMR1 |= 0x1 <<shiftBy;
}

template<std::size_t module>
template<uint8_t idx>
template<uint8_t idx_>
typename std::enable_if<(idx_ >= 3 && idx_ <= 4)>::type
TIM<module>::CC<idx>::enableOCPreload_() volatile
{
  constexpr uint8_t shiftBy{ 3 + (idx - 3) * 8};
  reinterpret_cast<TIM<module> volatile*>(module)->m_CCMR2 |= 0x1 <<shiftBy;
}

template<std::size_t module>
void TIM<module>::enableUpdateDMARequest() volatile
{
  m_DIER |= 0x1 <<8;
}

template<std::size_t module>
void TIM<module>::disableUpdateDMARequest() volatile
{
  m_DIER &= ~(0x1 <<8);
}

template<std::size_t module>
void TIM<module>::enableUpdateInterrupt() volatile
{
  m_DIER |= 0x1;
}

template<std::size_t module>
void TIM<module>::disableUpdateInterrupt() volatile
{
  m_DIER &= ~0x1;
}

template<std::size_t module>
bool TIM<module>::getStatus() volatile
{
  return m_SR & 0x1;
}

template<std::size_t module>
void TIM<module>::clearStatus() volatile
{
  m_SR &= ~0x1;
}

template<std::size_t module>
void TIM<module>::generateEvent() volatile
{
  m_EGR |= 0x1;
}

} //NS TIM
} //NS stm32f429

#endif
